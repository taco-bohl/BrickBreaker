package Game;

import Controls.KeyboardController;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author (Your Name Here)
 */
public class Game extends JPanel {

    // Instance variables declared here

    private KeyboardController controller;
    Ball ball;
    Brick brick;
    Paddle paddle;
    Brick[][] bricks;

    @Override
    public void paint(Graphics g) {
        // Draw GameObjects and anything else here
        ball.draw(g);
        paddle.draw(g);
        int originalX = brick.getXPosition();
        for(int i = 0; i < bricks.length; i++)
        {
            brick.draw(g);
 
        }
        
        

    }

    public void updateGameState() {
        // Move GameObjects and check for collisions here
//        ball.move();
//        paddle.move();
//        if(ball.isColliding(brick))
//        {
//            ball.setXSpeed(-ball.getXSpeed());
//            ball.setYSpeed(-ball.getYSpeed());
//            bricks.remove(brick);
//        }
//        
//        if(ball.isColliding(paddle))
//        {
//            ball.setXSpeed(-ball.getXSpeed());
//            ball.setYSpeed(-ball.getYSpeed());
//        }

    }

    public final void setupGame() {
        // Instantiate instance variables here
         ball = new Ball(100, 400, 20, Color.yellow);
         
         paddle = new Paddle(200, 400, 30, 15, 25, Color.BLUE, controller);
         bricks = new Brick[3][9];
         for(int i = 0; i < bricks.length; i++)
         {
             bricks[3][i] = new Brick(brick.getXPosition()+15, 20, 30, 15, Color.red);
             bricks[2][i] = new Brick(brick.getXPosition()+15, 35, 30, 15, Color.red);
             bricks[1][i] = new Brick(brick.getXPosition()+15, 50, 30, 15, Color.red);
             bricks[0][i] = new Brick(brick.getXPosition()+15, 65, 30, 15, Color.red);
         }

    }

    // Constructor method should not be modified
    public Game() {
        // Set the size of the Panel to the correct size
        this.setPreferredSize(new Dimension(600, 800));

        // Set the background color of the Panel to black
        this.setBackground(Color.BLACK);

        // Instantiate a KeyboardController and listen for input with it
        controller = new KeyboardController();
        this.addKeyListener(controller);

        // Call the setupGame method to initialize instance variables
        this.setupGame();

        // Get focus in the window
        this.setFocusable(true);
        this.requestFocusInWindow();
    }

    // Start method should not be modified
    public void start() {
        // Set up a new Timer to repeat every 25 milliseconds (40 FPS)
        timer = new Timer(25, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                // update the game state and redraw the screen.
                updateGameState();
                repaint();
            }
        });

        timer.setRepeats(true);
        timer.start();
    }

    Timer timer;
}
